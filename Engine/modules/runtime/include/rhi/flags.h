#pragma once
#include "cyber_rhi_config.h"
#include <stdint.h>

// enums
typedef enum ERHINvAPI_Status
{
    RHI_NVAPI_OK = 0,
    RHI_NVAPI_NONE = 1,
    RHI_NVAPI_ERROR = -1,
    RHI_NVAPI_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHINvAPI_Status;

typedef enum ERHIAGSReturenCode
{
    RHI_AGS_SUCCESS,                    ///< Successful function call
    RHI_AGS_FAILURE,                    ///< Failed to complete call for some unspecified reason
    RHI_AGS_INVALID_ARGS,               ///< Invalid arguments into the function
    RHI_AGS_OUT_OF_MEMORY,              ///< Out of memory when allocating space internally
    RHI_AGS_MISSING_D3D_DLL,            ///< Returned when a D3D dll fails to load
    RHI_AGS_LEGACY_DRIVER,              ///< Returned if a feature is not present in the installed driver
    RHI_AGS_NO_AMD_DRIVER_INSTALLED,    ///< Returned if the AMD GPU driver does not appear to be installed
    RHI_AGS_EXTENSION_NOT_SUPPORTED,    ///< Returned if the driver does not support the requested driver extension
    RHI_AGS_ADL_FAILURE,                ///< Failure in ADL (the AMD Display Library)
    RHI_AGS_DX_FAILURE,                 ///< Failure from DirectX runtime
    RHI_AGS_NONE,
    RHI_AGS_MAX_ENUN_BIT = 0x7FFFFFFF
} ERHIAGSReturenCode;

typedef enum ERHITextureDimension
{
    RHI_TEX_DIMENSION_1D,
    RHI_TEX_DIMENSION_2D,
    RHI_TEX_DIMENSION_2DMS,
    RHI_TEX_DIMENSION_3D,
    RHI_TEX_DIMENSION_CUBE,
    RHI_TEX_DIMENSION_1D_ARRAY,
    RHI_TEX_DIMENSION_2D_ARRAY,
    RHI_TEX_DIMENSION_2DMS_ARRAY,
    RHI_TEX_DIMENSION_CUBE_ARRAY,
    RHI_TEX_DIMENSION_COUNT,
    RHI_TEX_DIMENSION_UNDEFINED,
    RHI_TEX_DIMENSION_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHITextureDimension;

typedef enum ERHIPipelineType
{
    RHI_PIPELINE_TYPE_NONE = 0,
    RHI_PIPELINE_TYPE_COMPUTE,
    RHI_PIPELINE_TYPE_GRAPHICS,
    RHI_PIPELINE_TYPE_RAYTRACING,
    RHI_PIPELINE_TYPE_COUNT,
    RHI_PIPELINE_TYPE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIPipelineType;


typedef enum ERHIFenceStatus
{
    RHI_FENCE_STATUS_COMPLETE = 0,
    RHI_FENCE_STATUS_INCOMPLETE,
    RHI_FENCE_STATUS_NOTSUBMITTED,
    RHI_FENCE_STATUS_COUNT,
    RHI_FENCE_STATUS_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIFenceStatus;

typedef enum ERHIQueryType
{
    RHI_QUERY_TYPE_TIMESTAMP = 0,
    RHI_QUERY_TYPE_PIPELINE_STATISTICS,
    RHI_QUERY_TYPE_OCCLUSION,
    RHI_QUERY_TYPE_COUNT,
    RHI_QUERY_TYPE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIQueryType;

typedef enum ERHIResourceType
{
    RHI_RESOURCE_TYPE_NONE = 0,
    RHI_RESOURCE_TYPE_SAMPLER = 0x00000001,
    /// SRV Read only texture
    RHI_RESOURCE_TYPE_TEXTURE = (RHI_RESOURCE_TYPE_SAMPLER << 1),
    /// RTV Texture
    RHI_RESOURCE_TYPE_RENDER_TARGET = (RHI_RESOURCE_TYPE_TEXTURE << 1),
    /// DSV Texture
    RHI_RESOURCE_TYPE_DEPTH_STENCIL = (RHI_RESOURCE_TYPE_RENDER_TARGET << 1),
    /// UAV Texture
    RHI_RESOURCE_TYPE_RW_TEXTURE = (RHI_RESOURCE_TYPE_DEPTH_STENCIL << 1),
    /// SRV Read only buffer
    RHI_RESOURCE_TYPE_BUFFER = (RHI_RESOURCE_TYPE_RW_TEXTURE << 1),
    RHI_RESOURCE_TYPE_BUFFER_RAW = (RHI_RESOURCE_TYPE_BUFFER | (RHI_RESOURCE_TYPE_BUFFER << 1)),
    /// UAV Buffer
    RHI_RESOURCE_TYPE_RW_BUFFER = (RHI_RESOURCE_TYPE_BUFFER << 2),
    RHI_RESOURCE_TYPE_RW_BUFFER_RAW = (RHI_RESOURCE_TYPE_RW_BUFFER | (RHI_RESOURCE_TYPE_RW_BUFFER << 1)),
    /// CBV Uniform buffer
    RHI_RESOURCE_TYPE_UNIFORM_BUFFER = (RHI_RESOURCE_TYPE_RW_BUFFER << 2),
    /// Push constant / Root constant
    RHI_RESOURCE_TYPE_PUSH_CONTANT = (RHI_RESOURCE_TYPE_UNIFORM_BUFFER << 1),
    /// IA
    RHI_RESOURCE_TYPE_VERTEX_BUFFER = (RHI_RESOURCE_TYPE_PUSH_CONTANT << 1),
    RHI_RESOURCE_TYPE_INDEX_BUFFER = (RHI_RESOURCE_TYPE_VERTEX_BUFFER << 1),
    RHI_RESOURCE_TYPE_INDIRECT_BUFFER = (RHI_RESOURCE_TYPE_INDEX_BUFFER << 1),
    /// Cubemap SRV
    RHI_RESOURCE_TYPE_TEXTURE_CUBE = (RHI_RESOURCE_TYPE_INDIRECT_BUFFER << 1),
    /// RTV / DSV per mip slice
    RHI_RESOURCE_TYPE_RENDER_TARGET_MIP_SLICES = (RHI_RESOURCE_TYPE_TEXTURE_CUBE << 1),
    /// RTV / DSV per array slice
    RHI_RESOURCE_TYPE_RENDER_TARGET_ARRAY_SLICES = (RHI_RESOURCE_TYPE_RENDER_TARGET_MIP_SLICES << 1),
    /// RTV / DSV per depth slice
    RHI_RESOURCE_TYPE_RENDER_TARGET_DEPTH_SLICES = (RHI_RESOURCE_TYPE_RENDER_TARGET_ARRAY_SLICES << 1),
    RHI_RESOURCE_TYPE_RAY_TRACING = (RHI_RESOURCE_TYPE_RENDER_TARGET_DEPTH_SLICES << 1),
#if defined (RHI_USE_VULKAN)
    /// Subpass input (descriptor type only available in Vulkan)
    RHI_RESOURCE_TYPE_INPUT_ATTACHMENT = (RHI_RESOURCE_TYPE_RAY_TRACING << 1),
    RHI_RESOURCE_TYPE_TEXEL_BUFFER = (RHI_RESOURCE_TYPE_INPUT_ATTACHMENT << 1),
    RHI_RESOURCE_TYPE_RW_TEXEL_BUFFER = (RHI_RESOURCE_TYPE_TEXEL_BUFFER << 1),
    RHI_RESOURCE_TYPE_COMBINED_IMAGE_SAMPLER = (RHI_RESOURCE_TYPE_RW_TEXEL_BUFFER << 1),
#endif
    RHI_RESOURCE_TYPE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIResourceType;

// Same value as Vulkan Enumeration Bits.
typedef enum ERHIShaderStage
{
    RHI_SHADER_STAGE_NONE = 0,
    RHI_SHADER_STAGE_VERT = 0X00000001,
    RHI_SHADER_STAGE_TESC = 0X00000002,
    RHI_SHADER_STAGE_TESE = 0X00000004,
    RHI_SHADER_STAGE_GEOM = 0X00000008,
    RHI_SHADER_STAGE_FRAG = 0X00000010,
    RHI_SHADER_STAGE_COMPUTE = 0X00000020,
    RHI_SHADER_STAGE_RAYTRACING = 0X00000040,

    RHI_SHADER_STAGE_ALL_GRAPHCIS = (uint32_t)RHI_SHADER_STAGE_VERT | (uint32_t)RHI_SHADER_STAGE_TESC | (uint32_t)RHI_SHADER_STAGE_GEOM | (uint32_t)RHI_SHADER_STAGE_FRAG,
    RHI_SHADER_STAGE_HULL = RHI_SHADER_STAGE_TESC,
    RHI_SHADER_STAGE_DOMAIN = RHI_SHADER_STAGE_TESE,
    RHI_SHADER_STAGE_COUNT = 6,
    RHI_SHADER_STAGE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIShaderStage;

typedef uint32_t ERHIShaderStages;

typedef enum ERHIShaderTarget
{
#if defined (DIRECT3D11)
    shader_target_5_0,
#endif
    shader_target_5_1,
    shader_target_6_0,
    shader_target_6_1,
    shader_target_6_2,
    shader_target_6_3,
    shader_target_6_4,
} ERHIShaderTarget;

typedef enum ERHIVertexInputRate
{
    RHI_INPUT_RATE_VERTEX = 0,
    RHI_INPUT_RATE_INSTANCE = 1,
    RHI_INPUT_RATE_COUNT,
    RHI_INPUT_RATE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIVertexInputRate;

typedef enum ERHIPrimitiveTopology
{
    RHI_PRIM_TOPO_POINT_LIST = 0,
    RHI_PRIM_TOPO_LINE_LIST,
    RHI_PRIM_TOPO_LINE_STRIP,
    RHI_PRIM_TOPO_TRIANGLE_LIST,
    RHI_PRIM_TOPO_TRIANGLE_STRIP,
    RHI_PRIM_TOPO_PATCH_LIST,
    RHI_PRIM_TOPO_COUNT,
    RHI_PRIM_TOPO_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIPrimitiveTopology;

typedef enum ERHIBlendMode
{
    RHI_BLEND_MODE_ADD = 0,
    RHI_BLEND_MODE_SUBTRACT,
    RHI_BLEND_MODE_REVERSE_SUBTRACT,
    RHI_BLEND_MODE_MIN,
    RHI_BLEND_MODE_MAX,
    RHI_BLEND_MODE_COUNT,
    RHI_BLEND_MODE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIBlendMode;

typedef enum ERHIBlendConstant
{
    RHI_BLEND_CONST_ZERO = 0,
    RHI_BLEND_CONST_ONE,
    RHI_BLEND_CONST_SRC_COLOR,
    RHI_BLEND_CONST_ONE_MINUS_SRC_COLOR,
    RHI_BLEND_CONST_DST_COLOR,
    RHI_BLEND_CONST_ONE_MINUS_DST_COLOR,
    RHI_BLEND_CONST_SRC_ALPHA,
    RHI_BLEND_CONST_ONE_MINUS_SRC_ALPHA,
    RHI_BLEND_CONST_DST_ALPHA,
    RHI_BLEND_CONST_ONE_MINUS_DST_ALPHA,
    RHI_BLEND_CONST_SRC_ALPHA_SATURATE,
    RHI_BLEND_CONST_BLEND_FACTOR,
    RHI_BLEND_CONST_ONE_MINUS_BLEND_FACTOR,
    RHI_BLEND_CONST_COUNT,
    RHI_BLEND_CONST_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIBlendConstant;

typedef enum ERHICullMode
{
    RHI_CULL_MODE_NONE = 0,
    RHI_CULL_MODE_BACK,
    RHI_CULL_MODE_FRONT,
    RHI_CLUU_MODE_BOTH,
    RHI_CULL_MODE_COUNT,
    RHI_CULL_MODE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHICullMode;

typedef enum ERHIFrontFace
{
    RHI_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    RHI_FRONT_FACE_CLOCKWISE,
    RHI_FRONT_FACE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIFrontFace;

typedef enum ERHIFillMode
{
    RHI_FILL_MODE_SOLID = 0,
    RHI_FILL_MODE_WIREFRAME,
    RHI_FILL_MODE_COUNT,
    RHI_FILL_MODE_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIFillMode;

typedef enum ERHICompareMode
{
    RHI_CMP_NEVER = 0,
    RHI_CMP_LESS,
    RHI_CMP_EQUAL,
    RHI_CMP_LESS_EQUAL,
    RHI_CMP_GREATER,
    RHI_CMP_NOT_EQUAL,
    RHI_CMP_GREATER_EQUAL,
    RHI_CMP_ALWAYS,
    RHI_CMP_COUNT,
    RHI_CMP_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHICompareMode;

typedef enum ERHIStencilOp
{
    RHI_STENCIL_OP_KEEP = 0,
    RHI_STENCIL_OP_ZERO,
    RHI_STENCIL_OP_REPLACE,
    RHI_STENCIL_OP_INVERT,
    RHI_STENCIL_OP_INCR,
    RHI_STENCIL_OP_DECR,
    RHI_STENCIL_OP_INCR_SAT,
    RHI_STENCIL_OP_DECR_SAT,
    RHI_STENCIL_OP_COUNT,
    RHI_STENCIL_OP_MAX_ENUM_BIT = 0x7FFFFFFF
} ERHIStencilOp;